Injection plans

1. on service activation, we create the injection plan (io.helidon.inject.runtime.ServiceProviderBase.gatherDependencies)
    - for each IpInfo, find providers
    - create injectionContext
2. we may obtain an injection plan from Application through injectionPlanBinder


Map<IpId<?>, Supplier<?>> injectionPlan = new HashMap<>();

        Services services = injectionServices.services();
        for (IpInfo ipInfo : servicesDeps) {
            prepareDependency(services, injectionPlan, ipInfo);
        }

        this.injectionContext = InjectionContext.create(injectionPlan);



io.helidon.inject.runtime.DefaultInjectionPlans.resolve



        binder.bindTo(FakeWebServer__ServiceDescriptor.INSTANCE)
            .bindVoid(FakeWebServer__ServiceDescriptor.IP_PARAM_0) // config bean
            .bind(FakeWebServer__ServiceDescriptor.IP_PARAM_1, VoidServiceProvider.VoidDescriptor.INSTANCE) // Optional.empty()
            .commit();

InjectServiceActivator - gather dependencies
InjectServiceProvider - requires implementation

Maven plugin (AbstractApplicationCreatorMojo and others)
Application

io.helidon.inject.runtime.DefaultInjectionPlans.accumulate - next step, gather dependencies

io.helidon.inject.runtime.AbstractServiceProvider - the main culprit

test subject:
io.helidon.inject.tests.inject.tbox.impl.MainToolBox

io.helidon.inject.runtime.HelloInjectionWorldSanityTest.injectionPlanResolved


User APIs:
- ServiceDescriptor<T>
- ServiceProvider<T> extends Provider<T>, ServiceDescriptor<T>

Internal APIs (code generated)
- ServiceSource<T> extends ServiceDescriptor<T>

