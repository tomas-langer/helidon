
Services that do not have @Singleton are automatically providers that always create a new instace
- maybe add a custom annotation so we can force annotation processing on such types?

1. Using service source instead of activators/service providers
    a. Interfaces `ServiceSource` and `ServiceDescriptor`
2.


External module build using maven (process a jar file)
Remove <T> from ServiceDescriptor
Maybe rename ServiceSource to ServiceDescriptor and ServiceDescriptor to ServiceInfo?
Use ServiceProvider as a parameter to exception again?
Static method inject
Static field inject
Prepare dependencies same way from application creator as from injection itself
    1. on service activation, we create the injection plan (io.helidon.inject.runtime.ServiceProviderBase.gatherDependencies)
        - for each IpInfo, find providers
        - create injectionContext
    2. we may obtain an injection plan from Application through injectionPlanBinder

    InjectServiceActivator - gather dependencies
    InjectServiceProvider - requires implementation

External module request - remove inner classes switch, as it does not make sense. We always want to process non-private inner classes

What can be used:

ApplicationCreator - only from maven plugin
ExternalModuleCreator - only from maven plugin
DescriptorCreator = both from maven plugin and from annotation processor


Helidon injection extensions
 -