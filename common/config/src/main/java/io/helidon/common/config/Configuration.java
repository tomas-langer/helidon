package io.helidon.common.config;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.function.Function;

/**
 * Configuration related types used in Helidon declarative.
 */
public final class Configuration {
    private Configuration() {
    }

    /**
     * Configuration property, can be used when using Helidon declarative.
     */
    @Target(ElementType.PARAMETER)
    @Retention(RetentionPolicy.CLASS)
    @Documented
    public @interface Value {
        /**
         * Configuration key (from the config root) to find the value.
         * <p>
         * Default configuration key is {@code <class_name>.<field_name>} for field injection (if supported),
         * and {@code <className>.<constructor_param_name>} for constructor injection. The {@code <class_name>}
         * is the fully qualified class name of the type that uses this annotation.
         * <p>
         * Note that parameter names are not retained for runtime, so the parameter name when not using
         * build time processing would be generated by the JVM.
         * <p>
         * A default value can be specified as part of the key definition, separated by {@code :} (colon) from
         * the key, such as:
         * <pre>
         *     public MyType(@Config.Value("app.greeting:Ciao") String greeting) {
         *     }
         * </pre>
         * This would look in configuration tree for key {@code app.greeting}, and if not found, would use
         * {@code Ciao} as the default value. If default value is not defined, and the property does not exist,
         * an exception would be thrown at runtime.
         * <p>
         * Default values will have string converters applied if the type is not {@link String}.
         * To provide a more complex default, such as when mapping a configuration tree to an object, use
         * {@link #defaultProvider()} instead.
         *
         * @return configuration value key, with possible default value
         */
        String value() default "";

        /**
         * A class (with accessible constructor to the component using it) that provides the default value
         * of the type expected by the injected field/parameter.
         *
         * @return default provider class
         */
        Class<? extends Function<Config, ?>> defaultProvider() default NoProvider.class;

        /**
         * Default value of {@link Value#defaultProvider()}.
         */
        final class NoProvider implements Function<Config, Object> {
            private NoProvider() {
            }

            @Override
            public Object apply(Config config) {
                throw new ConfigException("This default value provider should not be used");
            }
        }
    }
}
